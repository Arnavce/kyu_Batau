// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NON_BINARY
}

enum Method {
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  UPI_WALLET
}

enum Status {
  BOOKED 
  FAILED 
  COMPLETED
}

enum Rating {
  WORSE 
  BAD 
  OK 
  GOOD 
  AMAZING
  FANTASTIC 
  GOAT
}

model Users {
  id Int @id @default(autoincrement())
  username  String @unique
  email    String @unique
  password_hash String 
  phone_number String
  location String
  dob DateTime
  gender  Gender
  created_at     DateTime @default(now())
  bookings bookings[]
  movie_reviews movie_reviews[]

}

model theaters {
   id Int @id @default(autoincrement())
   name String
   location String
   total_screens Int
   screens screen[]
   preferences seat_references[]

}

model movies {
  id Int @id @default(autoincrement())
  title String
  description String
  duration  Int
  release_data DateTime
  language String
  genre String
  imdb_rating Float
  trailer_link String
   shows shows[]
   movie_cast movie_cast[]
   movie_crew movie_crew[]
   movie_reviews movie_reviews[]
}



model screen{
  id Int @id @default(autoincrement())
  theater_id Int
  theater theaters @relation(fields: [theater_id],references: [id])
  screen_type String 
  total_seats Int
  shows shows[]
}

model shows {
  id Int @id @default(autoincrement())
  movie_id Int 
  movie  movies  @relation(fields: [movie_id],references: [id])
  screen_id Int
  screen screen @relation(fields: [screen_id],references: [id])
  show_time DateTime
  price Float
  available_seats Int
  ticket_prices ticket_prices[]
  seats seats[]
  booking bookings[]
  tickets tickets[]
}

model ticket_prices{
  id Int @id @default(autoincrement())
  show_id Int
  shows shows @relation(fields: [show_id],references: [id])
  price Float
}

model tickets {
  id Int @id @default(autoincrement())
   show_id Int
   shows shows @relation(fields: [show_id],references: [id])
    boking_id Int
  booking bookings @relation(fields: [boking_id],references: [id])
  seat_number String
  ticker_price Float
  issue_date DateTime
}


model seats{
  id Int @id @default(autoincrement())
   show_id Int
   shows shows @relation(fields: [show_id],references: [id])
   seat_numebr String
   is_booked Boolean
   seat_row Int
   seat_column Int
   preference_id Int
   preference_score Int
}

model seat_references {
  id Int @id @default(autoincrement())
  theater_id Int
  theater theaters @relation(fields: [theater_id],references: [id])
  seat_type String
  description String
}

model bookings {
  id Int @id @default(autoincrement())
  user_id Int
  show_id Int
   shows shows @relation(fields: [show_id],references: [id])
  user Users @relation(fields: [user_id],references: [id])
  booking_date DateTime
  total_amount Float
  status Status
  payments payments[]
  transaction_id String
  transactions transactions @relation(fields: [transaction_id],references: [id])
  tickets tickets[]
  
}

model transactions {
  id String @id @default(uuid())
  transacttion_date DateTime
  amount Float
  status Status
 booking bookings[]
}


model payments {
  id String @id @default(uuid())
  boking_id Int
  booking bookings @relation(fields: [boking_id],references: [id])
  payment_date DateTime
  payment_amount  Float
  payment_method Method
  payment_status Status
  transaction_id String


}

model movie_cast {
  id Int @id @default(autoincrement())
  movie_id Int
  movies movies  @relation(fields: [movie_id],references: [id])
  actor_name String
  role String
  
}

model movie_crew {
  id Int @id @default(autoincrement())
  movie_id Int
  movies movies  @relation(fields: [movie_id],references: [id])
  crew_member_name String
  role String

}

model movie_reviews {
  id Int @id @default(autoincrement())
  movie_id Int
  movies movies  @relation(fields: [movie_id],references: [id])
  user_id Int
  users Users  @relation(fields: [user_id],references: [id])
  review_tetxt String
  rating Rating
  review_date DateTime
}